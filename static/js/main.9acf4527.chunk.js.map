{"version":3,"sources":["components/Header.js","components/Form.js","helpers.js","components/Message.js","components/Result.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Header","Form","props","mount","setMount","timePay","setTimePay","setTotal","setLoading","useState","error","setError","onSubmit","event","preventDefault","setTimeout","total","totalMount","totalTime","calculateTotal","className","type","placeholder","onChange","parseInt","target","value","Message","Result","toFixed","Spinner","App","component","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9acf4527.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <div>\n            <h1>Calcular Credito</h1>\n        </div>\n    )\n}\n\nexport default Header\n","import React, {useState} from 'react';\nimport { calculateTotal } from \"../helpers\";\n\nfunction Form(props) {    \n    const {mount, setMount, timePay, setTimePay, setTotal, setLoading} = props;\n\n    const readMount = (event) => {\n        //console.log(event.target.value)\n        setMount( parseInt( event.target.value));\n    }\n\n    // Definir state\n    const [error, setError] = useState(false);\n\n    // Click Submit button\n    const calculateLoan = event => {\n        event.preventDefault();\n\n        // Validar\n        if (mount === 0 || timePay === '') {\n            setError(true)\n        } else{\n            // Eliminar error previo\n            setError(false)\n        }\n\n        // Habilitar Spinner\n        setLoading(true);\n        \n        setTimeout( () => {\n            // Realiar cotizacion\n            const total = calculateTotal(mount, timePay);\n    \n            // Guardar total despues de calcular\n            setTotal(total);\n\n            // Deshabilitar spinner\n            setLoading(false);\n\n        }, 3000);\n    }\n\n    return (\n        <div>\n            <form onSubmit = {calculateLoan}>\n                {/* {mount}\n                {timePay} */}\n          <div className=\"row\">\n              <div>\n                  <label>Cantidad Prestamo</label>\n                  <input \n                      className=\"u-full-width\" \n                      type=\"number\" \n                      placeholder=\"Ejemplo: 3000\" \n                      onChange = { readMount }\n                  />\n              </div>\n              <div>\n                  <label>Plazo para Pagar</label>\n                  <select \n                      className=\"u-full-width\"\n                      onChange = {event => setTimePay( parseInt(event.target.value))}\n                  >\n                      <option value=\"\">Seleccionar</option>\n                      <option value=\"3\">3 meses</option>\n                      <option value=\"6\">6 meses</option>\n                      <option value=\"12\">12 meses</option>\n                      <option value=\"24\">24 meses</option>\n                  </select>\n              </div>\n              <div>\n                  <input \n                      type=\"submit\" \n                      value=\"Calcular\" \n                      className=\"button-primary u-full-width\" \n                  />\n              </div>\n          </div>\n  </form>\n\n        {(error) ? <p className = \"error\">\n            Todos los campos son obligatorios\n        </p> : null}\n        \n\n        </div>\n    )\n}\n\nexport default Form\n","export function calculateTotal(mount, timePay){\n    // Cantidades\n    // 0-1000 = 25%\n    // 1001-5000 = 20%\n    // 5001 - 10000 = 15%\n    // + 10000 = 10%\n\n    let totalMount;\n    if (mount <= 1000) {\n        totalMount = mount * .25;        \n    } else if (mount > 1000 && mount <= 5000) {\n        totalMount = mount * .20;\n    } else if (mount > 5000 && mount <= 10000) {\n        totalMount = mount * .15;\n    } else {\n        totalMount = mount * .10;\n    }\n\n\n    // Plazo meses\n    // 3 = 5%\n    // 6 = 10%\n    // 12 = 15%\n    // 24 = 20%\n\n    let totalTime = 0;\n\n    switch (timePay) {\n        case 3:\n            totalTime = mount * 0.05;\n            break;\n        case 6:\n            totalTime = mount * 0.10;\n            break;\n        case 12:\n            totalTime = mount * 0.15;\n            break;\n        case 24:\n            totalTime = mount * 0.20;\n            break;\n        default:\n            break;\n    }\n    \n    return totalTime + totalMount + mount\n}","import React from 'react'\n\nconst Message = () => (\n    <p>Agrega un monto y plazo a pagar para cotizar.</p>\n);\n\nexport default Message;","import React from 'react';\n\n\nfunction Result(props) {\n    const {total, timePay, mount} = props;\n    \n    return (\n    <div className = \"u-full-width resultado\">\n        <h2>Resumen</h2>\n\n    <ul>\n        <li>La cantidad solicitada es: <strong>${ mount }</strong> </li>\n        <li>A pagar en: <strong>{ timePay } Meses </strong></li>\n        <li>Pago mensual de: <strong>${ (total / timePay).toFixed(2) }</strong> </li>\n        <li>Total a pagar: <strong>${ total.toFixed(2) }</strong> </li>\n    </ul>\n    </div>\n    );\n}\n\nexport default Result\n","import React from 'react';\nimport './Spinner.css';\n\n//Spiner oficial site\n\n// https://tobiasahlin.com/spinkit/\n\nfunction Spinner() {\n    return (\n        <div>\n            <div className=\"sk-cube-grid\">\n            <div className=\"sk-cube sk-cube1\"></div>\n            <div className=\"sk-cube sk-cube2\"></div>\n            <div className=\"sk-cube sk-cube3\"></div>\n            <div className=\"sk-cube sk-cube4\"></div>\n            <div className=\"sk-cube sk-cube5\"></div>\n            <div className=\"sk-cube sk-cube6\"></div>\n            <div className=\"sk-cube sk-cube7\"></div>\n            <div className=\"sk-cube sk-cube8\"></div>\n            <div className=\"sk-cube sk-cube9\"></div>\n</div>\n        </div>\n    )\n}\n\nexport default Spinner\n","import React, {useState}  from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Message from \"./components/Message\";\nimport Result from \"./components/Result\";\nimport Spinner from \"./components/Spinner\"\n\nfunction App() {\n  // contador prueba\n  const [mount, setMount] = useState(0);\n  const [timePay, setTimePay] = useState('');\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  let component;\n\n  if (loading) {\n    component = <Spinner />\n  } else if (total === 0) {\n    component = <Message />\n  } else{\n    component = <Result\n                  total = {total}\n                  timePay = {timePay}\n                  mount = {mount} \n                  />\n  }\n\n  return (\n    <div className=\"App\">\n      <Header  />\n\n      <div className = \"container\">\n        <Form mount = {mount} setMount = { setMount }\n        timePay = {timePay} setTimePay = {setTimePay}\n        setTotal = {setTotal}\n        setLoading = {setLoading}\n        />\n\n      <div className = \"mensajes\">\n        {component}\n      </div>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}